' Developer Express Code Central Example:
' How to keep master and detail view column widths synchronized
' 
' When you have a master-detail view and for some reason don't want to use the
' AutoColumnWidth option, the detail view is still stretched to accommodate the
' entire master view's width. So, in this example we've decided to create a grid
' view that changes this behavior and synchronizes the detail view's width with
' the mater view's columns.
' We create and register a GridView descendant that
' introduces the AutoSynchronizeDetailsLayout option by using a descendant of the
' GridOptionsView class. If this option is enabled and the AutoColumnWidth option
' is disabled the new behavior takes effect. The detail view's width is now
' calculated based on the master view columns' width, so, the detail view ends up
' with the last master view's column. In addition, if the number of detail and
' master view columns is equal, the detail view's columns are aligned with that of
' the master view for even a smoother view.
' 
' You can find sample updates and versions for different programming languages here:
' http://www.devexpress.com/example=E2454

' Developer Express Code Central Example:
' How to keep master and detail view column widths synchronized
' 
' When you have a master-detail view and for some reason don't want to use the
' AutoColumnWidth option, the detail view is still stretched to accommodate the
' entire master view's width. So, in this example we've decided to create a grid
' view that changes this behavior and synchronizes the detail view's width with
' the mater view's columns.
' We create and register a GridView descendant that
' introduces the AutoSynchronizeDetailsLayout option by using a descendant of the
' GridOptionsView class. If this option is enabled and the AutoColumnWidth option
' is disabled the new behavior takes effect. The detail view's width is now
' calculated based on the master view columns' width, so, the detail view ends up
' with the last master view's column. In addition, if the number of detail and
' master view columns is equal, the detail view's columns are aligned with that of
' the master view for even a smoother view.
' 
' You can find sample updates and versions for different programming languages here:
' http://www.devexpress.com/example=E2454

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5448
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB:
'#pragma warning disable 1591

Namespace GridViewDetailColumnWidth


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), Global.System.Xml.Serialization.XmlRootAttribute("CarsDBDataSet"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>
	Partial Public Class CarsDBDataSet
		Inherits System.Data.DataSet

		Private tableCars As CarsDataTable

		Private tableCarScheduling As CarSchedulingDataTable

		Private tableCities As CitiesDataTable

		Private tableCustomers As CustomersDataTable

		Private tableOrders As OrdersDataTable

		Private tableUsageType As UsageTypeDataTable

		Private relationCarsCarScheduling As Global.System.Data.DataRelation

		Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (DirectCast(info.GetValue("XmlSchema", GetType(String)), String))
			If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As New Global.System.Data.DataSet()
				ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
				If (ds.Tables("Cars") IsNot Nothing) Then
					MyBase.Tables.Add(New CarsDataTable(ds.Tables("Cars")))
				End If
				If (ds.Tables("CarScheduling") IsNot Nothing) Then
					MyBase.Tables.Add(New CarSchedulingDataTable(ds.Tables("CarScheduling")))
				End If
				If (ds.Tables("Cities") IsNot Nothing) Then
					MyBase.Tables.Add(New CitiesDataTable(ds.Tables("Cities")))
				End If
				If (ds.Tables("Customers") IsNot Nothing) Then
					MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
				End If
				If (ds.Tables("Orders") IsNot Nothing) Then
					MyBase.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
				End If
				If (ds.Tables("UsageType") IsNot Nothing) Then
					MyBase.Tables.Add(New UsageTypeDataTable(ds.Tables("UsageType")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property Cars() As CarsDataTable
			Get
				Return Me.tableCars
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property CarScheduling() As CarSchedulingDataTable
			Get
				Return Me.tableCarScheduling
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property Cities() As CitiesDataTable
			Get
				Return Me.tableCities
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property Customers() As CustomersDataTable
			Get
				Return Me.tableCustomers
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property Orders() As OrdersDataTable
			Get
				Return Me.tableOrders
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property UsageType() As UsageTypeDataTable
			Get
				Return Me.tableUsageType
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.BrowsableAttribute(True), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>
		Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
		Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
		Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Overrides Function Clone() As Global.System.Data.DataSet
			Dim cln As CarsDBDataSet = (DirectCast(MyBase.Clone(), CarsDBDataSet))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As New Global.System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("Cars") IsNot Nothing) Then
					MyBase.Tables.Add(New CarsDataTable(ds.Tables("Cars")))
				End If
				If (ds.Tables("CarScheduling") IsNot Nothing) Then
					MyBase.Tables.Add(New CarSchedulingDataTable(ds.Tables("CarScheduling")))
				End If
				If (ds.Tables("Cities") IsNot Nothing) Then
					MyBase.Tables.Add(New CitiesDataTable(ds.Tables("Cities")))
				End If
				If (ds.Tables("Customers") IsNot Nothing) Then
					MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
				End If
				If (ds.Tables("Orders") IsNot Nothing) Then
					MyBase.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
				End If
				If (ds.Tables("UsageType") IsNot Nothing) Then
					MyBase.Tables.Add(New UsageTypeDataTable(ds.Tables("UsageType")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
			Dim stream As New Global.System.IO.MemoryStream()
			Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableCars = (DirectCast(MyBase.Tables("Cars"), CarsDataTable))
			If (initTable = True) Then
				If (Me.tableCars IsNot Nothing) Then
					Me.tableCars.InitVars()
				End If
			End If
			Me.tableCarScheduling = (DirectCast(MyBase.Tables("CarScheduling"), CarSchedulingDataTable))
			If (initTable = True) Then
				If (Me.tableCarScheduling IsNot Nothing) Then
					Me.tableCarScheduling.InitVars()
				End If
			End If
			Me.tableCities = (DirectCast(MyBase.Tables("Cities"), CitiesDataTable))
			If (initTable = True) Then
				If (Me.tableCities IsNot Nothing) Then
					Me.tableCities.InitVars()
				End If
			End If
			Me.tableCustomers = (DirectCast(MyBase.Tables("Customers"), CustomersDataTable))
			If (initTable = True) Then
				If (Me.tableCustomers IsNot Nothing) Then
					Me.tableCustomers.InitVars()
				End If
			End If
			Me.tableOrders = (DirectCast(MyBase.Tables("Orders"), OrdersDataTable))
			If (initTable = True) Then
				If (Me.tableOrders IsNot Nothing) Then
					Me.tableOrders.InitVars()
				End If
			End If
			Me.tableUsageType = (DirectCast(MyBase.Tables("UsageType"), UsageTypeDataTable))
			If (initTable = True) Then
				If (Me.tableUsageType IsNot Nothing) Then
					Me.tableUsageType.InitVars()
				End If
			End If
			Me.relationCarsCarScheduling = Me.Relations("CarsCarScheduling")
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitClass()
			Me.DataSetName = "CarsDBDataSet"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/CarsDBDataSet.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableCars = New CarsDataTable()
			MyBase.Tables.Add(Me.tableCars)
			Me.tableCarScheduling = New CarSchedulingDataTable()
			MyBase.Tables.Add(Me.tableCarScheduling)
			Me.tableCities = New CitiesDataTable()
			MyBase.Tables.Add(Me.tableCities)
			Me.tableCustomers = New CustomersDataTable()
			MyBase.Tables.Add(Me.tableCustomers)
			Me.tableOrders = New OrdersDataTable()
			MyBase.Tables.Add(Me.tableOrders)
			Me.tableUsageType = New UsageTypeDataTable()
			MyBase.Tables.Add(Me.tableUsageType)
			Me.relationCarsCarScheduling = New Global.System.Data.DataRelation("CarsCarScheduling", New Global.System.Data.DataColumn() { Me.tableCars.IDColumn}, New Global.System.Data.DataColumn() { Me.tableCarScheduling.CarIdColumn}, False)
			Me.Relations.Add(Me.relationCarsCarScheduling)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Function ShouldSerializeCars() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Function ShouldSerializeCarScheduling() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Function ShouldSerializeCities() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Function ShouldSerializeCustomers() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Function ShouldSerializeOrders() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Function ShouldSerializeUsageType() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
			Dim ds As New CarsDBDataSet()
			Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
			Dim any As New Global.System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As New Global.System.IO.MemoryStream()
				Dim s2 As New Global.System.IO.MemoryStream()
				Try
					Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
					Do While schemas.MoveNext()
						schema = (DirectCast(schemas.Current, Global.System.Xml.Schema.XmlSchema))
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0
							Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If
					Loop
				Finally
					If (s1 IsNot Nothing) Then
						s1.Close()
					End If
					If (s2 IsNot Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function

		Public Delegate Sub CarsRowChangeEventHandler(ByVal sender As Object, ByVal e As CarsRowChangeEvent)

		Public Delegate Sub CarSchedulingRowChangeEventHandler(ByVal sender As Object, ByVal e As CarSchedulingRowChangeEvent)

		Public Delegate Sub CitiesRowChangeEventHandler(ByVal sender As Object, ByVal e As CitiesRowChangeEvent)

		Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)

		Public Delegate Sub OrdersRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdersRowChangeEvent)

		Public Delegate Sub UsageTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As UsageTypeRowChangeEvent)

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class CarsDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnID As Global.System.Data.DataColumn

			Private columnTrademark As Global.System.Data.DataColumn

			Private columnModel As Global.System.Data.DataColumn

			Private columnHP As Global.System.Data.DataColumn

			Private columnLiter As Global.System.Data.DataColumn

			Private columnCyl As Global.System.Data.DataColumn

			Private columnTransmissSpeedCount As Global.System.Data.DataColumn

			Private columnTransmissAutomatic As Global.System.Data.DataColumn

			Private columnMPG_City As Global.System.Data.DataColumn

			Private columnMPG_Highway As Global.System.Data.DataColumn

			Private columnCategory As Global.System.Data.DataColumn

			Private columnDescription As Global.System.Data.DataColumn

			Private columnHyperlink As Global.System.Data.DataColumn

			Private columnPicture As Global.System.Data.DataColumn

			Private columnPrice As Global.System.Data.DataColumn

			Private columnRtfContent As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New()
				Me.TableName = "Cars"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property TrademarkColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTrademark
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property ModelColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnModel
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property HPColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnHP
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property LiterColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLiter
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property CylColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCyl
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property TransmissSpeedCountColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTransmissSpeedCount
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property TransmissAutomaticColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTransmissAutomatic
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property MPG_CityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnMPG_City
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property MPG_HighwayColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnMPG_Highway
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCategory
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property HyperlinkColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnHyperlink
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPicture
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPrice
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property RtfContentColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnRtfContent
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)>
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Default Public ReadOnly Property Item(ByVal index As Integer) As CarsRow
				Get
					Return (DirectCast(Me.Rows(index), CarsRow))
				End Get
			End Property

			Public Event CarsRowChanging As CarsRowChangeEventHandler

			Public Event CarsRowChanged As CarsRowChangeEventHandler

			Public Event CarsRowDeleting As CarsRowChangeEventHandler

			Public Event CarsRowDeleted As CarsRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub AddCarsRow(ByVal row As CarsRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function AddCarsRow(ByVal Trademark As String, ByVal Model As String, ByVal HP As Short, ByVal Liter As Double, ByVal Cyl As Byte, ByVal TransmissSpeedCount As Byte, ByVal TransmissAutomatic As String, ByVal MPG_City As Byte, ByVal MPG_Highway As Byte, ByVal Category As String, ByVal Description As String, ByVal Hyperlink As String, ByVal Picture() As Byte, ByVal Price As Decimal, ByVal RtfContent As String) As CarsRow
				Dim rowCarsRow As CarsRow = (DirectCast(Me.NewRow(), CarsRow))
				Dim columnValuesArray() As Object = { Nothing, Trademark, Model, HP, Liter, Cyl, TransmissSpeedCount, TransmissAutomatic, MPG_City, MPG_Highway, Category, Description, Hyperlink, Picture, Price, RtfContent}
				rowCarsRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCarsRow)
				Return rowCarsRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function FindByID(ByVal ID As Integer) As CarsRow
				Return (DirectCast(Me.Rows.Find(New Object() { ID}), CarsRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As CarsDataTable = (DirectCast(MyBase.Clone(), CarsDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New CarsDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub InitVars()
				Me.columnID = MyBase.Columns("ID")
				Me.columnTrademark = MyBase.Columns("Trademark")
				Me.columnModel = MyBase.Columns("Model")
				Me.columnHP = MyBase.Columns("HP")
				Me.columnLiter = MyBase.Columns("Liter")
				Me.columnCyl = MyBase.Columns("Cyl")
				Me.columnTransmissSpeedCount = MyBase.Columns("TransmissSpeedCount")
				Me.columnTransmissAutomatic = MyBase.Columns("TransmissAutomatic")
				Me.columnMPG_City = MyBase.Columns("MPG_City")
				Me.columnMPG_Highway = MyBase.Columns("MPG_Highway")
				Me.columnCategory = MyBase.Columns("Category")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnHyperlink = MyBase.Columns("Hyperlink")
				Me.columnPicture = MyBase.Columns("Picture")
				Me.columnPrice = MyBase.Columns("Price")
				Me.columnRtfContent = MyBase.Columns("RtfContent")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Private Sub InitClass()
				Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnTrademark = New Global.System.Data.DataColumn("Trademark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTrademark)
				Me.columnModel = New Global.System.Data.DataColumn("Model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnModel)
				Me.columnHP = New Global.System.Data.DataColumn("HP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHP)
				Me.columnLiter = New Global.System.Data.DataColumn("Liter", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLiter)
				Me.columnCyl = New Global.System.Data.DataColumn("Cyl", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCyl)
				Me.columnTransmissSpeedCount = New Global.System.Data.DataColumn("TransmissSpeedCount", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTransmissSpeedCount)
				Me.columnTransmissAutomatic = New Global.System.Data.DataColumn("TransmissAutomatic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTransmissAutomatic)
				Me.columnMPG_City = New Global.System.Data.DataColumn("MPG_City", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnMPG_City)
				Me.columnMPG_Highway = New Global.System.Data.DataColumn("MPG_Highway", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnMPG_Highway)
				Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCategory)
				Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnHyperlink = New Global.System.Data.DataColumn("Hyperlink", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHyperlink)
				Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPicture)
				Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPrice)
				Me.columnRtfContent = New Global.System.Data.DataColumn("RtfContent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRtfContent)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
				Me.columnTrademark.MaxLength = 50
				Me.columnModel.MaxLength = 50
				Me.columnTransmissAutomatic.MaxLength = 3
				Me.columnCategory.MaxLength = 7
				Me.columnDescription.MaxLength = 536870910
				Me.columnHyperlink.MaxLength = 50
				Me.columnRtfContent.MaxLength = 536870910
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function NewCarsRow() As CarsRow
				Return (DirectCast(Me.NewRow(), CarsRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New CarsRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(CarsRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent CarsRowChanged(Me, New CarsRowChangeEvent((DirectCast(e.Row, CarsRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent CarsRowChanging(Me, New CarsRowChangeEvent((DirectCast(e.Row, CarsRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent CarsRowDeleted(Me, New CarsRowChangeEvent((DirectCast(e.Row, CarsRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent CarsRowDeleting(Me, New CarsRowChangeEvent((DirectCast(e.Row, CarsRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub RemoveCarsRow(ByVal row As CarsRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New CarsDBDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CarsDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (DirectCast(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class CarSchedulingDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnID As Global.System.Data.DataColumn

			Private columnCarId As Global.System.Data.DataColumn

			Private columnUserId As Global.System.Data.DataColumn

			Private columnStatus As Global.System.Data.DataColumn

			Private columnSubject As Global.System.Data.DataColumn

			Private columnDescription As Global.System.Data.DataColumn

			Private columnLabel As Global.System.Data.DataColumn

			Private columnStartTime As Global.System.Data.DataColumn

			Private columnEndTime As Global.System.Data.DataColumn

			Private columnLocation As Global.System.Data.DataColumn

			Private columnAllDay As Global.System.Data.DataColumn

			Private columnEventType As Global.System.Data.DataColumn

			Private columnRecurrenceInfo As Global.System.Data.DataColumn

			Private columnReminderInfo As Global.System.Data.DataColumn

			Private columnPrice As Global.System.Data.DataColumn

			Private columnContactInfo As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New()
				Me.TableName = "CarScheduling"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property CarIdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCarId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property UserIdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnUserId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnStatus
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnSubject
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property LabelColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLabel
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property StartTimeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnStartTime
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property EndTimeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnEndTime
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLocation
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property AllDayColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnAllDay
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property EventTypeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnEventType
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property RecurrenceInfoColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnRecurrenceInfo
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property ReminderInfoColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnReminderInfo
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPrice
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property ContactInfoColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnContactInfo
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)>
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Default Public ReadOnly Property Item(ByVal index As Integer) As CarSchedulingRow
				Get
					Return (DirectCast(Me.Rows(index), CarSchedulingRow))
				End Get
			End Property

			Public Event CarSchedulingRowChanging As CarSchedulingRowChangeEventHandler

			Public Event CarSchedulingRowChanged As CarSchedulingRowChangeEventHandler

			Public Event CarSchedulingRowDeleting As CarSchedulingRowChangeEventHandler

			Public Event CarSchedulingRowDeleted As CarSchedulingRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub AddCarSchedulingRow(ByVal row As CarSchedulingRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function AddCarSchedulingRow(ByVal parentCarsRowByCarsCarScheduling As CarsRow, ByVal UserId As Integer, ByVal Status As Integer, ByVal Subject As String, ByVal Description As String, ByVal Label As Integer, ByVal StartTime As Date, ByVal EndTime As Date, ByVal Location As String, ByVal AllDay As Boolean, ByVal EventType As Integer, ByVal RecurrenceInfo As String, ByVal ReminderInfo As String, ByVal Price As Decimal, ByVal ContactInfo As String) As CarSchedulingRow
				Dim rowCarSchedulingRow As CarSchedulingRow = (DirectCast(Me.NewRow(), CarSchedulingRow))
				Dim columnValuesArray() As Object = { Nothing, Nothing, UserId, Status, Subject, Description, Label, StartTime, EndTime, Location, AllDay, EventType, RecurrenceInfo, ReminderInfo, Price, ContactInfo}
				If (parentCarsRowByCarsCarScheduling IsNot Nothing) Then
					columnValuesArray(1) = parentCarsRowByCarsCarScheduling(0)
				End If
				rowCarSchedulingRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCarSchedulingRow)
				Return rowCarSchedulingRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function FindByID(ByVal ID As Integer) As CarSchedulingRow
				Return (DirectCast(Me.Rows.Find(New Object() { ID}), CarSchedulingRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As CarSchedulingDataTable = (DirectCast(MyBase.Clone(), CarSchedulingDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New CarSchedulingDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub InitVars()
				Me.columnID = MyBase.Columns("ID")
				Me.columnCarId = MyBase.Columns("CarId")
				Me.columnUserId = MyBase.Columns("UserId")
				Me.columnStatus = MyBase.Columns("Status")
				Me.columnSubject = MyBase.Columns("Subject")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnLabel = MyBase.Columns("Label")
				Me.columnStartTime = MyBase.Columns("StartTime")
				Me.columnEndTime = MyBase.Columns("EndTime")
				Me.columnLocation = MyBase.Columns("Location")
				Me.columnAllDay = MyBase.Columns("AllDay")
				Me.columnEventType = MyBase.Columns("EventType")
				Me.columnRecurrenceInfo = MyBase.Columns("RecurrenceInfo")
				Me.columnReminderInfo = MyBase.Columns("ReminderInfo")
				Me.columnPrice = MyBase.Columns("Price")
				Me.columnContactInfo = MyBase.Columns("ContactInfo")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Private Sub InitClass()
				Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnCarId = New Global.System.Data.DataColumn("CarId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCarId)
				Me.columnUserId = New Global.System.Data.DataColumn("UserId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnUserId)
				Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnStatus)
				Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnSubject)
				Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnLabel = New Global.System.Data.DataColumn("Label", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLabel)
				Me.columnStartTime = New Global.System.Data.DataColumn("StartTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnStartTime)
				Me.columnEndTime = New Global.System.Data.DataColumn("EndTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEndTime)
				Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLocation)
				Me.columnAllDay = New Global.System.Data.DataColumn("AllDay", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnAllDay)
				Me.columnEventType = New Global.System.Data.DataColumn("EventType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEventType)
				Me.columnRecurrenceInfo = New Global.System.Data.DataColumn("RecurrenceInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRecurrenceInfo)
				Me.columnReminderInfo = New Global.System.Data.DataColumn("ReminderInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnReminderInfo)
				Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPrice)
				Me.columnContactInfo = New Global.System.Data.DataColumn("ContactInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnContactInfo)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
				Me.columnSubject.MaxLength = 50
				Me.columnDescription.MaxLength = 536870910
				Me.columnLocation.MaxLength = 50
				Me.columnRecurrenceInfo.MaxLength = 536870910
				Me.columnReminderInfo.MaxLength = 536870910
				Me.columnContactInfo.MaxLength = 536870910
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function NewCarSchedulingRow() As CarSchedulingRow
				Return (DirectCast(Me.NewRow(), CarSchedulingRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New CarSchedulingRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(CarSchedulingRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent CarSchedulingRowChanged(Me, New CarSchedulingRowChangeEvent((DirectCast(e.Row, CarSchedulingRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent CarSchedulingRowChanging(Me, New CarSchedulingRowChangeEvent((DirectCast(e.Row, CarSchedulingRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent CarSchedulingRowDeleted(Me, New CarSchedulingRowChangeEvent((DirectCast(e.Row, CarSchedulingRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent CarSchedulingRowDeleting(Me, New CarSchedulingRowChangeEvent((DirectCast(e.Row, CarSchedulingRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub RemoveCarSchedulingRow(ByVal row As CarSchedulingRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New CarsDBDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CarSchedulingDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (DirectCast(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class CitiesDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnID As Global.System.Data.DataColumn

			Private columnCity As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New()
				Me.TableName = "Cities"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)>
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Default Public ReadOnly Property Item(ByVal index As Integer) As CitiesRow
				Get
					Return (DirectCast(Me.Rows(index), CitiesRow))
				End Get
			End Property

			Public Event CitiesRowChanging As CitiesRowChangeEventHandler

			Public Event CitiesRowChanged As CitiesRowChangeEventHandler

			Public Event CitiesRowDeleting As CitiesRowChangeEventHandler

			Public Event CitiesRowDeleted As CitiesRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub AddCitiesRow(ByVal row As CitiesRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function AddCitiesRow(ByVal City As String) As CitiesRow
				Dim rowCitiesRow As CitiesRow = (DirectCast(Me.NewRow(), CitiesRow))
				Dim columnValuesArray() As Object = { Nothing, City}
				rowCitiesRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCitiesRow)
				Return rowCitiesRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function FindByID(ByVal ID As Integer) As CitiesRow
				Return (DirectCast(Me.Rows.Find(New Object() { ID}), CitiesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As CitiesDataTable = (DirectCast(MyBase.Clone(), CitiesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New CitiesDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub InitVars()
				Me.columnID = MyBase.Columns("ID")
				Me.columnCity = MyBase.Columns("City")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Private Sub InitClass()
				Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCity)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
				Me.columnCity.MaxLength = 100
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function NewCitiesRow() As CitiesRow
				Return (DirectCast(Me.NewRow(), CitiesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New CitiesRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(CitiesRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent CitiesRowChanged(Me, New CitiesRowChangeEvent((DirectCast(e.Row, CitiesRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent CitiesRowChanging(Me, New CitiesRowChangeEvent((DirectCast(e.Row, CitiesRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent CitiesRowDeleted(Me, New CitiesRowChangeEvent((DirectCast(e.Row, CitiesRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent CitiesRowDeleting(Me, New CitiesRowChangeEvent((DirectCast(e.Row, CitiesRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub RemoveCitiesRow(ByVal row As CitiesRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New CarsDBDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CitiesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (DirectCast(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class CustomersDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnID As Global.System.Data.DataColumn

			Private columnFirstName As Global.System.Data.DataColumn

			Private columnLastName As Global.System.Data.DataColumn

			Private columnCompany As Global.System.Data.DataColumn

			Private columnPrefix As Global.System.Data.DataColumn

			Private columnTitle As Global.System.Data.DataColumn

			Private columnAddress As Global.System.Data.DataColumn

			Private columnCity As Global.System.Data.DataColumn

			Private columnState As Global.System.Data.DataColumn

			Private columnZipCode As Global.System.Data.DataColumn

			Private columnSource As Global.System.Data.DataColumn

			Private columnCustomer As Global.System.Data.DataColumn

			Private columnHomePhone As Global.System.Data.DataColumn

			Private columnFaxPhone As Global.System.Data.DataColumn

			Private columnSpouse As Global.System.Data.DataColumn

			Private columnOccupation As Global.System.Data.DataColumn

			Private columnDescription As Global.System.Data.DataColumn

			Private columnEmail As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New()
				Me.TableName = "Customers"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnFirstName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLastName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCompany
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property PrefixColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPrefix
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTitle
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnAddress
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnState
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property ZipCodeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnZipCode
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property SourceColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnSource
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property CustomerColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCustomer
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnHomePhone
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property FaxPhoneColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnFaxPhone
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property SpouseColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnSpouse
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property OccupationColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnOccupation
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnEmail
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)>
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Default Public ReadOnly Property Item(ByVal index As Integer) As CustomersRow
				Get
					Return (DirectCast(Me.Rows(index), CustomersRow))
				End Get
			End Property

			Public Event CustomersRowChanging As CustomersRowChangeEventHandler

			Public Event CustomersRowChanged As CustomersRowChangeEventHandler

			Public Event CustomersRowDeleting As CustomersRowChangeEventHandler

			Public Event CustomersRowDeleted As CustomersRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub AddCustomersRow(ByVal row As CustomersRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function AddCustomersRow(ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal Prefix As String, ByVal Title As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal ZipCode As String, ByVal Source As String, ByVal Customer As String, ByVal HomePhone As String, ByVal FaxPhone As String, ByVal Spouse As String, ByVal Occupation As String, ByVal Description As String, ByVal Email As String) As CustomersRow
				Dim rowCustomersRow As CustomersRow = (DirectCast(Me.NewRow(), CustomersRow))
				Dim columnValuesArray() As Object = { Nothing, FirstName, LastName, Company, Prefix, Title, Address, City, State, ZipCode, Source, Customer, HomePhone, FaxPhone, Spouse, Occupation, Description, Email}
				rowCustomersRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCustomersRow)
				Return rowCustomersRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function FindByID(ByVal ID As Integer) As CustomersRow
				Return (DirectCast(Me.Rows.Find(New Object() { ID}), CustomersRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As CustomersDataTable = (DirectCast(MyBase.Clone(), CustomersDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New CustomersDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub InitVars()
				Me.columnID = MyBase.Columns("ID")
				Me.columnFirstName = MyBase.Columns("FirstName")
				Me.columnLastName = MyBase.Columns("LastName")
				Me.columnCompany = MyBase.Columns("Company")
				Me.columnPrefix = MyBase.Columns("Prefix")
				Me.columnTitle = MyBase.Columns("Title")
				Me.columnAddress = MyBase.Columns("Address")
				Me.columnCity = MyBase.Columns("City")
				Me.columnState = MyBase.Columns("State")
				Me.columnZipCode = MyBase.Columns("ZipCode")
				Me.columnSource = MyBase.Columns("Source")
				Me.columnCustomer = MyBase.Columns("Customer")
				Me.columnHomePhone = MyBase.Columns("HomePhone")
				Me.columnFaxPhone = MyBase.Columns("FaxPhone")
				Me.columnSpouse = MyBase.Columns("Spouse")
				Me.columnOccupation = MyBase.Columns("Occupation")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnEmail = MyBase.Columns("Email")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Private Sub InitClass()
				Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFirstName)
				Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLastName)
				Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCompany)
				Me.columnPrefix = New Global.System.Data.DataColumn("Prefix", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPrefix)
				Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTitle)
				Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnAddress)
				Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCity)
				Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnState)
				Me.columnZipCode = New Global.System.Data.DataColumn("ZipCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnZipCode)
				Me.columnSource = New Global.System.Data.DataColumn("Source", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnSource)
				Me.columnCustomer = New Global.System.Data.DataColumn("Customer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCustomer)
				Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHomePhone)
				Me.columnFaxPhone = New Global.System.Data.DataColumn("FaxPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFaxPhone)
				Me.columnSpouse = New Global.System.Data.DataColumn("Spouse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnSpouse)
				Me.columnOccupation = New Global.System.Data.DataColumn("Occupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnOccupation)
				Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEmail)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
				Me.columnFirstName.MaxLength = 25
				Me.columnLastName.MaxLength = 25
				Me.columnCompany.MaxLength = 50
				Me.columnPrefix.MaxLength = 15
				Me.columnTitle.MaxLength = 15
				Me.columnAddress.MaxLength = 50
				Me.columnCity.MaxLength = 20
				Me.columnState.MaxLength = 2
				Me.columnZipCode.MaxLength = 10
				Me.columnSource.MaxLength = 10
				Me.columnCustomer.MaxLength = 1
				Me.columnHomePhone.MaxLength = 15
				Me.columnFaxPhone.MaxLength = 15
				Me.columnSpouse.MaxLength = 50
				Me.columnOccupation.MaxLength = 25
				Me.columnDescription.MaxLength = 536870910
				Me.columnEmail.MaxLength = 255
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function NewCustomersRow() As CustomersRow
				Return (DirectCast(Me.NewRow(), CustomersRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New CustomersRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(CustomersRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent((DirectCast(e.Row, CustomersRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent((DirectCast(e.Row, CustomersRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent((DirectCast(e.Row, CustomersRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent((DirectCast(e.Row, CustomersRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New CarsDBDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CustomersDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (DirectCast(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class OrdersDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnID As Global.System.Data.DataColumn

			Private columnCustomerID As Global.System.Data.DataColumn

			Private columnProductID As Global.System.Data.DataColumn

			Private columnPurchaseDate As Global.System.Data.DataColumn

			Private columnTime As Global.System.Data.DataColumn

			Private columnPaymentType As Global.System.Data.DataColumn

			Private columnPaymentAmount As Global.System.Data.DataColumn

			Private columnDescription As Global.System.Data.DataColumn

			Private columnQuantity As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New()
				Me.TableName = "Orders"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property CustomerIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property ProductIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnProductID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property PurchaseDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPurchaseDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property TimeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTime
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property PaymentTypeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPaymentType
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property PaymentAmountColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPaymentAmount
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnQuantity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)>
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Default Public ReadOnly Property Item(ByVal index As Integer) As OrdersRow
				Get
					Return (DirectCast(Me.Rows(index), OrdersRow))
				End Get
			End Property

			Public Event OrdersRowChanging As OrdersRowChangeEventHandler

			Public Event OrdersRowChanged As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleting As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleted As OrdersRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub AddOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function AddOrdersRow(ByVal CustomerID As Integer, ByVal ProductID As Integer, ByVal PurchaseDate As Date, ByVal Time As Date, ByVal PaymentType As String, ByVal PaymentAmount As Decimal, ByVal Description As String, ByVal Quantity As Integer) As OrdersRow
				Dim rowOrdersRow As OrdersRow = (DirectCast(Me.NewRow(), OrdersRow))
				Dim columnValuesArray() As Object = { Nothing, CustomerID, ProductID, PurchaseDate, Time, PaymentType, PaymentAmount, Description, Quantity}
				rowOrdersRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowOrdersRow)
				Return rowOrdersRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function FindByID(ByVal ID As Integer) As OrdersRow
				Return (DirectCast(Me.Rows.Find(New Object() { ID}), OrdersRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As OrdersDataTable = (DirectCast(MyBase.Clone(), OrdersDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New OrdersDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub InitVars()
				Me.columnID = MyBase.Columns("ID")
				Me.columnCustomerID = MyBase.Columns("CustomerID")
				Me.columnProductID = MyBase.Columns("ProductID")
				Me.columnPurchaseDate = MyBase.Columns("PurchaseDate")
				Me.columnTime = MyBase.Columns("Time")
				Me.columnPaymentType = MyBase.Columns("PaymentType")
				Me.columnPaymentAmount = MyBase.Columns("PaymentAmount")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnQuantity = MyBase.Columns("Quantity")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Private Sub InitClass()
				Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCustomerID)
				Me.columnProductID = New Global.System.Data.DataColumn("ProductID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnProductID)
				Me.columnPurchaseDate = New Global.System.Data.DataColumn("PurchaseDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPurchaseDate)
				Me.columnTime = New Global.System.Data.DataColumn("Time", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTime)
				Me.columnPaymentType = New Global.System.Data.DataColumn("PaymentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPaymentType)
				Me.columnPaymentAmount = New Global.System.Data.DataColumn("PaymentAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPaymentAmount)
				Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnQuantity)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AutoIncrement = True
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
				Me.columnPaymentType.MaxLength = 7
				Me.columnDescription.MaxLength = 536870910
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function NewOrdersRow() As OrdersRow
				Return (DirectCast(Me.NewRow(), OrdersRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New OrdersRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(OrdersRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent OrdersRowChanged(Me, New OrdersRowChangeEvent((DirectCast(e.Row, OrdersRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent OrdersRowChanging(Me, New OrdersRowChangeEvent((DirectCast(e.Row, OrdersRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent OrdersRowDeleted(Me, New OrdersRowChangeEvent((DirectCast(e.Row, OrdersRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent OrdersRowDeleting(Me, New OrdersRowChangeEvent((DirectCast(e.Row, OrdersRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub RemoveOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New CarsDBDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "OrdersDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (DirectCast(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class UsageTypeDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnId As Global.System.Data.DataColumn

			Private columnName As Global.System.Data.DataColumn

			Private columnColor As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New()
				Me.TableName = "UsageType"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property ColorColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnColor
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)>
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Default Public ReadOnly Property Item(ByVal index As Integer) As UsageTypeRow
				Get
					Return (DirectCast(Me.Rows(index), UsageTypeRow))
				End Get
			End Property

			Public Event UsageTypeRowChanging As UsageTypeRowChangeEventHandler

			Public Event UsageTypeRowChanged As UsageTypeRowChangeEventHandler

			Public Event UsageTypeRowDeleting As UsageTypeRowChangeEventHandler

			Public Event UsageTypeRowDeleted As UsageTypeRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub AddUsageTypeRow(ByVal row As UsageTypeRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function AddUsageTypeRow(ByVal Name As String, ByVal Color As Integer) As UsageTypeRow
				Dim rowUsageTypeRow As UsageTypeRow = (DirectCast(Me.NewRow(), UsageTypeRow))
				Dim columnValuesArray() As Object = { Nothing, Name, Color}
				rowUsageTypeRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowUsageTypeRow)
				Return rowUsageTypeRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function FindById(ByVal Id As Integer) As UsageTypeRow
				Return (DirectCast(Me.Rows.Find(New Object() { Id}), UsageTypeRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As UsageTypeDataTable = (DirectCast(MyBase.Clone(), UsageTypeDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New UsageTypeDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub InitVars()
				Me.columnId = MyBase.Columns("Id")
				Me.columnName = MyBase.Columns("Name")
				Me.columnColor = MyBase.Columns("Color")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Private Sub InitClass()
				Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnId)
				Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnName)
				Me.columnColor = New Global.System.Data.DataColumn("Color", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnColor)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnId}, True))
				Me.columnId.AutoIncrement = True
				Me.columnId.AllowDBNull = False
				Me.columnId.Unique = True
				Me.columnName.MaxLength = 50
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function NewUsageTypeRow() As UsageTypeRow
				Return (DirectCast(Me.NewRow(), UsageTypeRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New UsageTypeRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(UsageTypeRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent UsageTypeRowChanged(Me, New UsageTypeRowChangeEvent((DirectCast(e.Row, UsageTypeRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent UsageTypeRowChanging(Me, New UsageTypeRowChangeEvent((DirectCast(e.Row, UsageTypeRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent UsageTypeRowDeleted(Me, New UsageTypeRowChangeEvent((DirectCast(e.Row, UsageTypeRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent UsageTypeRowDeleting(Me, New UsageTypeRowChangeEvent((DirectCast(e.Row, UsageTypeRow)), e.Action))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub RemoveUsageTypeRow(ByVal row As UsageTypeRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New CarsDBDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "UsageTypeDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (DirectCast(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Partial Public Class CarsRow
			Inherits System.Data.DataRow

			Private tableCars As CarsDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCars = (DirectCast(Me.Table, CarsDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property ID() As Integer
				Get
					Return (DirectCast(Me(Me.tableCars.IDColumn), Integer))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCars.IDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Trademark() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.TrademarkColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Trademark' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.TrademarkColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Model() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.ModelColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Model' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.ModelColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property HP() As Short
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.HPColumn), Short))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'HP' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Short)
					Me(Me.tableCars.HPColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Liter() As Double
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.LiterColumn), Double))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Liter' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Double)
					Me(Me.tableCars.LiterColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Cyl() As Byte
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.CylColumn), Byte))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Cyl' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte)
					Me(Me.tableCars.CylColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property TransmissSpeedCount() As Byte
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.TransmissSpeedCountColumn), Byte))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'TransmissSpeedCount' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte)
					Me(Me.tableCars.TransmissSpeedCountColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property TransmissAutomatic() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.TransmissAutomaticColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'TransmissAutomatic' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.TransmissAutomaticColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property MPG_City() As Byte
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.MPG_CityColumn), Byte))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'MPG_City' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte)
					Me(Me.tableCars.MPG_CityColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property MPG_Highway() As Byte
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.MPG_HighwayColumn), Byte))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'MPG_Highway' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte)
					Me(Me.tableCars.MPG_HighwayColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Category() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.CategoryColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Category' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.CategoryColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Description() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.DescriptionColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.DescriptionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Hyperlink() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.HyperlinkColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Hyperlink' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.HyperlinkColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Picture() As Byte()
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.PictureColumn), Byte()))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte())
					Me(Me.tableCars.PictureColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Price() As Decimal
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.PriceColumn), Decimal))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableCars.PriceColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property RtfContent() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCars.RtfContentColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'RtfContent' in table 'Cars' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCars.RtfContentColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsTrademarkNull() As Boolean
				Return Me.IsNull(Me.tableCars.TrademarkColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetTrademarkNull()
				Me(Me.tableCars.TrademarkColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsModelNull() As Boolean
				Return Me.IsNull(Me.tableCars.ModelColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetModelNull()
				Me(Me.tableCars.ModelColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsHPNull() As Boolean
				Return Me.IsNull(Me.tableCars.HPColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetHPNull()
				Me(Me.tableCars.HPColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsLiterNull() As Boolean
				Return Me.IsNull(Me.tableCars.LiterColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetLiterNull()
				Me(Me.tableCars.LiterColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsCylNull() As Boolean
				Return Me.IsNull(Me.tableCars.CylColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetCylNull()
				Me(Me.tableCars.CylColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsTransmissSpeedCountNull() As Boolean
				Return Me.IsNull(Me.tableCars.TransmissSpeedCountColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetTransmissSpeedCountNull()
				Me(Me.tableCars.TransmissSpeedCountColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsTransmissAutomaticNull() As Boolean
				Return Me.IsNull(Me.tableCars.TransmissAutomaticColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetTransmissAutomaticNull()
				Me(Me.tableCars.TransmissAutomaticColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsMPG_CityNull() As Boolean
				Return Me.IsNull(Me.tableCars.MPG_CityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetMPG_CityNull()
				Me(Me.tableCars.MPG_CityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsMPG_HighwayNull() As Boolean
				Return Me.IsNull(Me.tableCars.MPG_HighwayColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetMPG_HighwayNull()
				Me(Me.tableCars.MPG_HighwayColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsCategoryNull() As Boolean
				Return Me.IsNull(Me.tableCars.CategoryColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetCategoryNull()
				Me(Me.tableCars.CategoryColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableCars.DescriptionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetDescriptionNull()
				Me(Me.tableCars.DescriptionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsHyperlinkNull() As Boolean
				Return Me.IsNull(Me.tableCars.HyperlinkColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetHyperlinkNull()
				Me(Me.tableCars.HyperlinkColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsPictureNull() As Boolean
				Return Me.IsNull(Me.tableCars.PictureColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetPictureNull()
				Me(Me.tableCars.PictureColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsPriceNull() As Boolean
				Return Me.IsNull(Me.tableCars.PriceColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetPriceNull()
				Me(Me.tableCars.PriceColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsRtfContentNull() As Boolean
				Return Me.IsNull(Me.tableCars.RtfContentColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetRtfContentNull()
				Me(Me.tableCars.RtfContentColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function GetCarSchedulingRows() As CarSchedulingRow()
				If (Me.Table.ChildRelations("CarsCarScheduling") Is Nothing) Then
					Return New CarSchedulingRow(){}
				Else
					Return (CType(MyBase.GetChildRows(Me.Table.ChildRelations("CarsCarScheduling")), CarSchedulingRow()))
				End If
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Partial Public Class CarSchedulingRow
			Inherits System.Data.DataRow

			Private tableCarScheduling As CarSchedulingDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCarScheduling = (DirectCast(Me.Table, CarSchedulingDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property ID() As Integer
				Get
					Return (DirectCast(Me(Me.tableCarScheduling.IDColumn), Integer))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.IDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property CarId() As Integer
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.CarIdColumn), Integer))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CarId' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.CarIdColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property UserId() As Integer
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.UserIdColumn), Integer))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'UserId' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.UserIdColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Status() As Integer
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.StatusColumn), Integer))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.StatusColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Subject() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.SubjectColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Subject' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.SubjectColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Description() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.DescriptionColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.DescriptionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Label() As Integer
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.LabelColumn), Integer))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Label' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.LabelColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property StartTime() As Date
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.StartTimeColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'StartTime' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Date)
					Me(Me.tableCarScheduling.StartTimeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property EndTime() As Date
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.EndTimeColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'EndTime' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Date)
					Me(Me.tableCarScheduling.EndTimeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Location() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.LocationColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.LocationColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property AllDay() As Boolean
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.AllDayColumn), Boolean))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'AllDay' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Boolean)
					Me(Me.tableCarScheduling.AllDayColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property EventType() As Integer
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.EventTypeColumn), Integer))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'EventType' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCarScheduling.EventTypeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property RecurrenceInfo() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.RecurrenceInfoColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'RecurrenceInfo' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.RecurrenceInfoColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property ReminderInfo() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.ReminderInfoColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ReminderInfo' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.ReminderInfoColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Price() As Decimal
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.PriceColumn), Decimal))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableCarScheduling.PriceColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property ContactInfo() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCarScheduling.ContactInfoColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ContactInfo' in table 'CarScheduling' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCarScheduling.ContactInfoColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property CarsRow() As CarsRow
				Get
					Return (DirectCast(Me.GetParentRow(Me.Table.ParentRelations("CarsCarScheduling")), CarsRow))
				End Get
				Set(ByVal value As CarsRow)
					Me.SetParentRow(value, Me.Table.ParentRelations("CarsCarScheduling"))
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsCarIdNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.CarIdColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetCarIdNull()
				Me(Me.tableCarScheduling.CarIdColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsUserIdNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.UserIdColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetUserIdNull()
				Me(Me.tableCarScheduling.UserIdColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsStatusNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.StatusColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetStatusNull()
				Me(Me.tableCarScheduling.StatusColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsSubjectNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.SubjectColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetSubjectNull()
				Me(Me.tableCarScheduling.SubjectColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.DescriptionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetDescriptionNull()
				Me(Me.tableCarScheduling.DescriptionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsLabelNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.LabelColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetLabelNull()
				Me(Me.tableCarScheduling.LabelColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsStartTimeNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.StartTimeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetStartTimeNull()
				Me(Me.tableCarScheduling.StartTimeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsEndTimeNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.EndTimeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetEndTimeNull()
				Me(Me.tableCarScheduling.EndTimeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsLocationNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.LocationColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetLocationNull()
				Me(Me.tableCarScheduling.LocationColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsAllDayNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.AllDayColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetAllDayNull()
				Me(Me.tableCarScheduling.AllDayColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsEventTypeNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.EventTypeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetEventTypeNull()
				Me(Me.tableCarScheduling.EventTypeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsRecurrenceInfoNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.RecurrenceInfoColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetRecurrenceInfoNull()
				Me(Me.tableCarScheduling.RecurrenceInfoColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsReminderInfoNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.ReminderInfoColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetReminderInfoNull()
				Me(Me.tableCarScheduling.ReminderInfoColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsPriceNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.PriceColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetPriceNull()
				Me(Me.tableCarScheduling.PriceColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsContactInfoNull() As Boolean
				Return Me.IsNull(Me.tableCarScheduling.ContactInfoColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetContactInfoNull()
				Me(Me.tableCarScheduling.ContactInfoColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Partial Public Class CitiesRow
			Inherits System.Data.DataRow

			Private tableCities As CitiesDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCities = (DirectCast(Me.Table, CitiesDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property ID() As Integer
				Get
					Return (DirectCast(Me(Me.tableCities.IDColumn), Integer))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCities.IDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property City() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCities.CityColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Cities' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCities.CityColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableCities.CityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetCityNull()
				Me(Me.tableCities.CityColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Partial Public Class CustomersRow
			Inherits System.Data.DataRow

			Private tableCustomers As CustomersDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCustomers = (DirectCast(Me.Table, CustomersDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property ID() As Integer
				Get
					Return (DirectCast(Me(Me.tableCustomers.IDColumn), Integer))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCustomers.IDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property FirstName() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.FirstNameColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.FirstNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property LastName() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.LastNameColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.LastNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Company() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.CompanyColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.CompanyColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Prefix() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.PrefixColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Prefix' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.PrefixColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Title() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.TitleColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.TitleColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Address() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.AddressColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.AddressColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property City() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.CityColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.CityColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property State() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.StateColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.StateColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property ZipCode() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.ZipCodeColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ZipCode' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.ZipCodeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Source() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.SourceColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Source' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.SourceColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Customer() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.CustomerColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Customer' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.CustomerColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property HomePhone() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.HomePhoneColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.HomePhoneColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property FaxPhone() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.FaxPhoneColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'FaxPhone' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.FaxPhoneColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Spouse() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.SpouseColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Spouse' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.SpouseColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Occupation() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.OccupationColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Occupation' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.OccupationColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Description() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.DescriptionColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.DescriptionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Email() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableCustomers.EmailColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Customers' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomers.EmailColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsFirstNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.FirstNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetFirstNameNull()
				Me(Me.tableCustomers.FirstNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsLastNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.LastNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetLastNameNull()
				Me(Me.tableCustomers.LastNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsCompanyNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CompanyColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetCompanyNull()
				Me(Me.tableCustomers.CompanyColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsPrefixNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.PrefixColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetPrefixNull()
				Me(Me.tableCustomers.PrefixColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsTitleNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.TitleColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetTitleNull()
				Me(Me.tableCustomers.TitleColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.AddressColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetAddressNull()
				Me(Me.tableCustomers.AddressColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetCityNull()
				Me(Me.tableCustomers.CityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsStateNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.StateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetStateNull()
				Me(Me.tableCustomers.StateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsZipCodeNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.ZipCodeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetZipCodeNull()
				Me(Me.tableCustomers.ZipCodeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsSourceNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.SourceColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetSourceNull()
				Me(Me.tableCustomers.SourceColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsCustomerNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.CustomerColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetCustomerNull()
				Me(Me.tableCustomers.CustomerColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsHomePhoneNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.HomePhoneColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetHomePhoneNull()
				Me(Me.tableCustomers.HomePhoneColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsFaxPhoneNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.FaxPhoneColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetFaxPhoneNull()
				Me(Me.tableCustomers.FaxPhoneColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsSpouseNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.SpouseColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetSpouseNull()
				Me(Me.tableCustomers.SpouseColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsOccupationNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.OccupationColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetOccupationNull()
				Me(Me.tableCustomers.OccupationColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.DescriptionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetDescriptionNull()
				Me(Me.tableCustomers.DescriptionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsEmailNull() As Boolean
				Return Me.IsNull(Me.tableCustomers.EmailColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetEmailNull()
				Me(Me.tableCustomers.EmailColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Partial Public Class OrdersRow
			Inherits System.Data.DataRow

			Private tableOrders As OrdersDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableOrders = (DirectCast(Me.Table, OrdersDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property ID() As Integer
				Get
					Return (DirectCast(Me(Me.tableOrders.IDColumn), Integer))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableOrders.IDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property CustomerID() As Integer
				Get
					Try
						Return (DirectCast(Me(Me.tableOrders.CustomerIDColumn), Integer))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerID' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableOrders.CustomerIDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property ProductID() As Integer
				Get
					Try
						Return (DirectCast(Me(Me.tableOrders.ProductIDColumn), Integer))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ProductID' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableOrders.ProductIDColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property PurchaseDate() As Date
				Get
					Try
						Return (DirectCast(Me(Me.tableOrders.PurchaseDateColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseDate' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Date)
					Me(Me.tableOrders.PurchaseDateColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Time() As Date
				Get
					Try
						Return (DirectCast(Me(Me.tableOrders.TimeColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Time' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Date)
					Me(Me.tableOrders.TimeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property PaymentType() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableOrders.PaymentTypeColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentType' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableOrders.PaymentTypeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property PaymentAmount() As Decimal
				Get
					Try
						Return (DirectCast(Me(Me.tableOrders.PaymentAmountColumn), Decimal))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentAmount' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableOrders.PaymentAmountColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Description() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableOrders.DescriptionColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableOrders.DescriptionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Quantity() As Integer
				Get
					Try
						Return (DirectCast(Me(Me.tableOrders.QuantityColumn), Integer))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableOrders.QuantityColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsCustomerIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.CustomerIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetCustomerIDNull()
				Me(Me.tableOrders.CustomerIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsProductIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ProductIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetProductIDNull()
				Me(Me.tableOrders.ProductIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsPurchaseDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.PurchaseDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetPurchaseDateNull()
				Me(Me.tableOrders.PurchaseDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsTimeNull() As Boolean
				Return Me.IsNull(Me.tableOrders.TimeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetTimeNull()
				Me(Me.tableOrders.TimeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsPaymentTypeNull() As Boolean
				Return Me.IsNull(Me.tableOrders.PaymentTypeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetPaymentTypeNull()
				Me(Me.tableOrders.PaymentTypeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsPaymentAmountNull() As Boolean
				Return Me.IsNull(Me.tableOrders.PaymentAmountColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetPaymentAmountNull()
				Me(Me.tableOrders.PaymentAmountColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableOrders.DescriptionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetDescriptionNull()
				Me(Me.tableOrders.DescriptionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsQuantityNull() As Boolean
				Return Me.IsNull(Me.tableOrders.QuantityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetQuantityNull()
				Me(Me.tableOrders.QuantityColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Partial Public Class UsageTypeRow
			Inherits System.Data.DataRow

			Private tableUsageType As UsageTypeDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableUsageType = (DirectCast(Me.Table, UsageTypeDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Id() As Integer
				Get
					Return (DirectCast(Me(Me.tableUsageType.IdColumn), Integer))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableUsageType.IdColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Name() As String
				Get
					Try
						Return (DirectCast(Me(Me.tableUsageType.NameColumn), String))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'UsageType' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableUsageType.NameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Property Color() As Integer
				Get
					Try
						Return (DirectCast(Me(Me.tableUsageType.ColorColumn), Integer))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Color' in table 'UsageType' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableUsageType.ColorColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsNameNull() As Boolean
				Return Me.IsNull(Me.tableUsageType.NameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetNameNull()
				Me(Me.tableUsageType.NameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Function IsColorNull() As Boolean
				Return Me.IsNull(Me.tableUsageType.ColorColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub SetColorNull()
				Me(Me.tableUsageType.ColorColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Public Class CarsRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CarsRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New(ByVal row As CarsRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Row() As CarsRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Public Class CarSchedulingRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CarSchedulingRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New(ByVal row As CarSchedulingRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Row() As CarSchedulingRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Public Class CitiesRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CitiesRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New(ByVal row As CitiesRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Row() As CitiesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Public Class CustomersRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CustomersRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New(ByVal row As CustomersRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Row() As CustomersRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Public Class OrdersRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As OrdersRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New(ByVal row As OrdersRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Row() As OrdersRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
		Public Class UsageTypeRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As UsageTypeRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public Sub New(ByVal row As UsageTypeRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Row() As UsageTypeRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
Namespace GridViewDetailColumnWidth.CarsDBDataSetTableAdapters


	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
	Partial Public Class CarsTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Cars"
			tableMapping.ColumnMappings.Add("ID", "ID")
			tableMapping.ColumnMappings.Add("Trademark", "Trademark")
			tableMapping.ColumnMappings.Add("Model", "Model")
			tableMapping.ColumnMappings.Add("HP", "HP")
			tableMapping.ColumnMappings.Add("Liter", "Liter")
			tableMapping.ColumnMappings.Add("Cyl", "Cyl")
			tableMapping.ColumnMappings.Add("TransmissSpeedCount", "TransmissSpeedCount")
			tableMapping.ColumnMappings.Add("TransmissAutomatic", "TransmissAutomatic")
			tableMapping.ColumnMappings.Add("MPG_City", "MPG_City")
			tableMapping.ColumnMappings.Add("MPG_Highway", "MPG_Highway")
			tableMapping.ColumnMappings.Add("Category", "Category")
			tableMapping.ColumnMappings.Add("Description", "Description")
			tableMapping.ColumnMappings.Add("Hyperlink", "Hyperlink")
			tableMapping.ColumnMappings.Add("Picture", "Picture")
			tableMapping.ColumnMappings.Add("Price", "Price")
			tableMapping.ColumnMappings.Add("RtfContent", "RtfContent")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Cars` WHERE ((`ID` = ?) AND ((? = 1 AND `Trademark` IS NULL) OR (`Trademark` = ?)) AND ((? = 1 AND `Model` IS NULL) OR (`Model` = ?)) AND ((? = 1 AND `HP` IS NULL) OR (`HP` = ?)) AND ((? = 1 AND `Liter` IS NULL) OR (`Liter` = ?)) AND ((? = 1 AND `Cyl` IS NULL) OR (`Cyl` = ?)) AND ((? = 1 AND `TransmissSpeedCount` IS NULL) OR (`TransmissSpeedCount` = ?)) AND ((? = 1 AND `TransmissAutomatic` IS NULL) OR (`TransmissAutomatic` = ?)) AND ((? = 1 AND `MPG_City` IS NULL) OR (`MPG_City` = ?)) AND ((? = 1 AND `MPG_Highway` IS NULL) OR (`MPG_Highway` = ?)) AND ((? = 1 AND `Category` IS NULL) OR (`Category` = ?)) AND ((? = 1 AND `Hyperlink` IS NULL) OR (`Hyperlink` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Trademark", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Trademark", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Model", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Model", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HP", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Liter", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Liter", Global.System.Data.OleDb.OleDbType.Double, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Cyl", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Cyl", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TransmissSpeedCount", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TransmissSpeedCount", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TransmissAutomatic", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TransmissAutomatic", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MPG_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MPG_City", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MPG_Highway", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MPG_Highway", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Category", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Category", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Hyperlink", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Hyperlink", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Price", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Price", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Cars` (`Trademark`, `Model`, `HP`, `Liter`, `Cyl`, `TransmissSpeedCount`, `TransmissAutomatic`, `MPG_City`, `MPG_Highway`, `Category`, `Description`, `Hyperlink`, `Picture`, `Price`, `RtfContent`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Trademark", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Model", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Liter", Global.System.Data.OleDb.OleDbType.Double, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cyl", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TransmissSpeedCount", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TransmissAutomatic", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MPG_City", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MPG_Highway", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Category", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Hyperlink", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Picture", Global.System.Data.OleDb.OleDbType.LongVarBinary, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Price", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RtfContent", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RtfContent", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Cars` SET `Trademark` = ?, `Model` = ?, `HP` = ?, `Liter` = ?, `Cyl` = ?, `TransmissSpeedCount` = ?, `TransmissAutomatic` = ?, `MPG_City` = ?, `MPG_Highway` = ?, `Category` = ?, `Description` = ?, `Hyperlink` = ?, `Picture` = ?, `Price` = ?, `RtfContent` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `Trademark` IS NULL) OR (`Trademark` = ?)) AND ((? = 1 AND `Model` IS NULL) OR (`Model` = ?)) AND ((? = 1 AND `HP` IS NULL) OR (`HP` = ?)) AND ((? = 1 AND `Liter` IS NULL) OR (`Liter` = ?)) AND ((? = 1 AND `Cyl` IS NULL) OR (`Cyl` = ?)) AND ((? = 1 AND `TransmissSpeedCount` IS NULL) OR (`TransmissSpeedCount` = ?)) AND ((? = 1 AND `TransmissAutomatic` IS NULL) OR (`TransmissAutomatic` = ?)) AND ((? = 1 AND `MPG_City` IS NULL) OR (`MPG_City` = ?)) AND ((? = 1 AND `MPG_Highway` IS NULL) OR (`MPG_Highway` = ?)) AND ((? = 1 AND `Category` IS NULL) OR (`Category` = ?)) AND ((? = 1 AND `Hyperlink` IS NULL) OR (`Hyperlink` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Trademark", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Model", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Liter", Global.System.Data.OleDb.OleDbType.Double, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cyl", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TransmissSpeedCount", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TransmissAutomatic", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MPG_City", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MPG_Highway", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Category", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Hyperlink", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Picture", Global.System.Data.OleDb.OleDbType.LongVarBinary, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Picture", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Price", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RtfContent", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RtfContent", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Trademark", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Trademark", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Trademark", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Model", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Model", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Model", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HP", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HP", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Liter", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Liter", Global.System.Data.OleDb.OleDbType.Double, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Liter", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Cyl", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Cyl", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Cyl", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TransmissSpeedCount", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TransmissSpeedCount", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissSpeedCount", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TransmissAutomatic", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TransmissAutomatic", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TransmissAutomatic", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MPG_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MPG_City", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MPG_Highway", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MPG_Highway", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "MPG_Highway", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Category", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Category", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Category", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Hyperlink", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Hyperlink", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Hyperlink", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Price", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Price", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.CarsDBConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT ID, Trademark, Model, HP, Liter, Cyl, TransmissSpeedCount, TransmissAutoma" & "tic, MPG_City, MPG_Highway, Category, Description, Hyperlink, Picture, Price, Rt" & "fContent FROM Cars"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
		Public Overridable Function Fill(ByVal dataTable As CarsDBDataSet.CarsDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
		Public Overridable Function GetData() As CarsDBDataSet.CarsDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New CarsDBDataSet.CarsDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataTable As CarsDBDataSet.CarsDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataSet As CarsDBDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Cars")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
		Public Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_Trademark As String, ByVal Original_Model As String, ByVal Original_HP? As Short, ByVal Original_Liter? As Double, ByVal Original_Cyl? As Byte, ByVal Original_TransmissSpeedCount? As Byte, ByVal Original_TransmissAutomatic As String, ByVal Original_MPG_City? As Byte, ByVal Original_MPG_Highway? As Byte, ByVal Original_Category As String, ByVal Original_Hyperlink As String, ByVal Original_Price? As Decimal) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_ID))
			If (Original_Trademark Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_Trademark))
			End If
			If (Original_Model Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_Model))
			End If
			If (Original_HP.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CShort(Math.Truncate(Original_HP.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (Original_Liter.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CDbl(Original_Liter.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			If (Original_Cyl.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CByte(Original_Cyl.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
			End If
			If (Original_TransmissSpeedCount.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CByte(Original_TransmissSpeedCount.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			End If
			If (Original_TransmissAutomatic Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_TransmissAutomatic))
			End If
			If (Original_MPG_City.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CByte(Original_MPG_City.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
			End If
			If (Original_MPG_Highway.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(17).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(18).Value = (CByte(Original_MPG_Highway.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(17).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
			End If
			If (Original_Category Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(19).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(19).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(20).Value = (CStr(Original_Category))
			End If
			If (Original_Hyperlink Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(21).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(21).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(22).Value = (CStr(Original_Hyperlink))
			End If
			If (Original_Price.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(23).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(24).Value = (CDec(Original_Price.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(23).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
		Public Overridable Function Insert(ByVal Trademark As String, ByVal Model As String, ByVal HP? As Short, ByVal Liter? As Double, ByVal Cyl? As Byte, ByVal TransmissSpeedCount? As Byte, ByVal TransmissAutomatic As String, ByVal MPG_City? As Byte, ByVal MPG_Highway? As Byte, ByVal Category As String, ByVal Description As String, ByVal Hyperlink As String, ByVal Picture() As Byte, ByVal Price? As Decimal, ByVal RtfContent As String) As Integer
			If (Trademark Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(Trademark))
			End If
			If (Model Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Model))
			End If
			If (HP.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CShort(Math.Truncate(HP.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Liter.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = (CDbl(Liter.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			End If
			If (Cyl.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = (CByte(Cyl.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (TransmissSpeedCount.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = (CByte(TransmissSpeedCount.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (TransmissAutomatic Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(TransmissAutomatic))
			End If
			If (MPG_City.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = (CByte(MPG_City.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			If (MPG_Highway.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = (CByte(MPG_Highway.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			If (Category Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(Category))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(Description))
			End If
			If (Hyperlink Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(11).Value = (CStr(Hyperlink))
			End If
			If (Picture Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(12).Value = (CType(Picture, Byte()))
			End If
			If (Price.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(13).Value = (CDec(Price.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
			End If
			If (RtfContent Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(14).Value = (CStr(RtfContent))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
		Public Overridable Function Update(ByVal Trademark As String, ByVal Model As String, ByVal HP? As Short, ByVal Liter? As Double, ByVal Cyl? As Byte, ByVal TransmissSpeedCount? As Byte, ByVal TransmissAutomatic As String, ByVal MPG_City? As Byte, ByVal MPG_Highway? As Byte, ByVal Category As String, ByVal Description As String, ByVal Hyperlink As String, ByVal Picture() As Byte, ByVal Price? As Decimal, ByVal RtfContent As String, ByVal Original_ID As Integer, ByVal Original_Trademark As String, ByVal Original_Model As String, ByVal Original_HP? As Short, ByVal Original_Liter? As Double, ByVal Original_Cyl? As Byte, ByVal Original_TransmissSpeedCount? As Byte, ByVal Original_TransmissAutomatic As String, ByVal Original_MPG_City? As Byte, ByVal Original_MPG_Highway? As Byte, ByVal Original_Category As String, ByVal Original_Hyperlink As String, ByVal Original_Price? As Decimal) As Integer
			If (Trademark Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(Trademark))
			End If
			If (Model Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Model))
			End If
			If (HP.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CShort(Math.Truncate(HP.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Liter.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CDbl(Liter.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			End If
			If (Cyl.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CByte(Cyl.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (TransmissSpeedCount.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CByte(TransmissSpeedCount.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (TransmissAutomatic Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(TransmissAutomatic))
			End If
			If (MPG_City.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CByte(MPG_City.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			If (MPG_Highway.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CByte(MPG_Highway.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			If (Category Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(Category))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Description))
			End If
			If (Hyperlink Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(Hyperlink))
			End If
			If (Picture Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CType(Picture, Byte()))
			End If
			If (Price.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CDec(Price.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
			End If
			If (RtfContent Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CStr(RtfContent))
			End If
			Me.Adapter.UpdateCommand.Parameters(15).Value = (CInt(Original_ID))
			If (Original_Trademark Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(16).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(16).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CStr(Original_Trademark))
			End If
			If (Original_Model Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(18).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(18).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CStr(Original_Model))
			End If
			If (Original_HP.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(20).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CShort(Math.Truncate(Original_HP.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(20).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
			End If
			If (Original_Liter.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(22).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CDbl(Original_Liter.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(22).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
			End If
			If (Original_Cyl.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(24).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CByte(Original_Cyl.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(24).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
			End If
			If (Original_TransmissSpeedCount.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(26).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CByte(Original_TransmissSpeedCount.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(26).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
			End If
			If (Original_TransmissAutomatic Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(28).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(28).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CStr(Original_TransmissAutomatic))
			End If
			If (Original_MPG_City.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(30).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CByte(Original_MPG_City.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(30).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
			End If
			If (Original_MPG_Highway.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(32).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(33).Value = (CByte(Original_MPG_Highway.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(32).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
			End If
			If (Original_Category Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(34).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(34).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CStr(Original_Category))
			End If
			If (Original_Hyperlink Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(36).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(36).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CStr(Original_Hyperlink))
			End If
			If (Original_Price.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(38).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(39).Value = (CDec(Original_Price.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(38).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
	Partial Public Class CarSchedulingTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "CarScheduling"
			tableMapping.ColumnMappings.Add("ID", "ID")
			tableMapping.ColumnMappings.Add("CarId", "CarId")
			tableMapping.ColumnMappings.Add("UserId", "UserId")
			tableMapping.ColumnMappings.Add("Status", "Status")
			tableMapping.ColumnMappings.Add("Subject", "Subject")
			tableMapping.ColumnMappings.Add("Description", "Description")
			tableMapping.ColumnMappings.Add("Label", "Label")
			tableMapping.ColumnMappings.Add("StartTime", "StartTime")
			tableMapping.ColumnMappings.Add("EndTime", "EndTime")
			tableMapping.ColumnMappings.Add("Location", "Location")
			tableMapping.ColumnMappings.Add("AllDay", "AllDay")
			tableMapping.ColumnMappings.Add("EventType", "EventType")
			tableMapping.ColumnMappings.Add("RecurrenceInfo", "RecurrenceInfo")
			tableMapping.ColumnMappings.Add("ReminderInfo", "ReminderInfo")
			tableMapping.ColumnMappings.Add("Price", "Price")
			tableMapping.ColumnMappings.Add("ContactInfo", "ContactInfo")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `CarScheduling` WHERE ((`ID` = ?) AND ((? = 1 AND `CarId` IS NULL) OR (`CarId` = ?)) AND ((? = 1 AND `UserId` IS NULL) OR (`UserId` = ?)) AND ((? = 1 AND `Status` IS NULL) OR (`Status` = ?)) AND ((? = 1 AND `Subject` IS NULL) OR (`Subject` = ?)) AND ((? = 1 AND `Label` IS NULL) OR (`Label` = ?)) AND ((? = 1 AND `StartTime` IS NULL) OR (`StartTime` = ?)) AND ((? = 1 AND `EndTime` IS NULL) OR (`EndTime` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` = ?)) AND ((? = 1 AND `AllDay` IS NULL) OR (`AllDay` = ?)) AND ((? = 1 AND `EventType` IS NULL) OR (`EventType` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CarId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CarId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UserId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UserId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Status", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Status", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Subject", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_StartTime", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_StartTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EndTime", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EndTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Location", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AllDay", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AllDay", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Price", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Price", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `CarScheduling` (`CarId`, `UserId`, `Status`, `Subject`, `Description`, `Label`, `StartTime`, `EndTime`, `Location`, `AllDay`, `EventType`, `RecurrenceInfo`, `ReminderInfo`, `Price`, `ContactInfo`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CarId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UserId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Status", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("StartTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EndTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AllDay", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RecurrenceInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RecurrenceInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReminderInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReminderInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Price", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `CarScheduling` SET `CarId` = ?, `UserId` = ?, `Status` = ?, `Subject` = ?, `Description` = ?, `Label` = ?, `StartTime` = ?, `EndTime` = ?, `Location` = ?, `AllDay` = ?, `EventType` = ?, `RecurrenceInfo` = ?, `ReminderInfo` = ?, `Price` = ?, `ContactInfo` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `CarId` IS NULL) OR (`CarId` = ?)) AND ((? = 1 AND `UserId` IS NULL) OR (`UserId` = ?)) AND ((? = 1 AND `Status` IS NULL) OR (`Status` = ?)) AND ((? = 1 AND `Subject` IS NULL) OR (`Subject` = ?)) AND ((? = 1 AND `Label` IS NULL) OR (`Label` = ?)) AND ((? = 1 AND `StartTime` IS NULL) OR (`StartTime` = ?)) AND ((? = 1 AND `EndTime` IS NULL) OR (`EndTime` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` = ?)) AND ((? = 1 AND `AllDay` IS NULL) OR (`AllDay` = ?)) AND ((? = 1 AND `EventType` IS NULL) OR (`EventType` = ?)) AND ((? = 1 AND `Price` IS NULL) OR (`Price` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CarId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UserId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Status", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("StartTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EndTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AllDay", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RecurrenceInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RecurrenceInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReminderInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReminderInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Price", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ContactInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CarId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CarId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CarId", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UserId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UserId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UserId", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Status", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Status", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Status", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Subject", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_StartTime", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_StartTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EndTime", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EndTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Location", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AllDay", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AllDay", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Price", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Price", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Price", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.CarsDBConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT ID, CarId, UserId, Status, Subject, Description, Label, StartTime, EndTime" & ", Location, AllDay, EventType, RecurrenceInfo, ReminderInfo, Price, ContactInfo " & "FROM CarScheduling"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
		Public Overridable Function Fill(ByVal dataTable As CarsDBDataSet.CarSchedulingDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
		Public Overridable Function GetData() As CarsDBDataSet.CarSchedulingDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New CarsDBDataSet.CarSchedulingDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataTable As CarsDBDataSet.CarSchedulingDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataSet As CarsDBDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "CarScheduling")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
		Public Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_CarId? As Integer, ByVal Original_UserId? As Integer, ByVal Original_Status? As Integer, ByVal Original_Subject As String, ByVal Original_Label? As Integer, ByVal Original_StartTime? As Global.System.DateTime, ByVal Original_EndTime? As Global.System.DateTime, ByVal Original_Location As String, ByVal Original_AllDay As Boolean, ByVal Original_EventType? As Integer, ByVal Original_Price? As Decimal) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_ID))
			If (Original_CarId.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CInt(Math.Truncate(Original_CarId.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Original_UserId.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CInt(Math.Truncate(Original_UserId.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (Original_Status.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CInt(Math.Truncate(Original_Status.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (Original_Subject Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_Subject))
			End If
			If (Original_Label.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CInt(Math.Truncate(Original_Label.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
			End If
			If (Original_StartTime.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CDate(Original_StartTime.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			End If
			If (Original_EndTime.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CDate(Original_EndTime.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			End If
			If (Original_Location Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_Location))
			End If
			Me.Adapter.DeleteCommand.Parameters(17).Value = (DirectCast(0, Object))
			Me.Adapter.DeleteCommand.Parameters(18).Value = (CBool(Original_AllDay))
			If (Original_EventType.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(19).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(20).Value = (CInt(Math.Truncate(Original_EventType.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(19).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
			End If
			If (Original_Price.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(21).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(22).Value = (CDec(Original_Price.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(21).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
		Public Overridable Function Insert(ByVal CarId? As Integer, ByVal UserId? As Integer, ByVal Status? As Integer, ByVal Subject As String, ByVal Description As String, ByVal Label? As Integer, ByVal StartTime? As Global.System.DateTime, ByVal EndTime? As Global.System.DateTime, ByVal Location As String, ByVal AllDay As Boolean, ByVal EventType? As Integer, ByVal RecurrenceInfo As String, ByVal ReminderInfo As String, ByVal Price? As Decimal, ByVal ContactInfo As String) As Integer
			If (CarId.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CInt(Math.Truncate(CarId.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (UserId.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = (CInt(Math.Truncate(UserId.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			If (Status.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CInt(Math.Truncate(Status.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Subject Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(Subject))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = (CStr(Description))
			End If
			If (Label.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = (CInt(Math.Truncate(Label.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (StartTime.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = (CDate(StartTime.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (EndTime.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = (CDate(EndTime.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			If (Location Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = (CStr(Location))
			End If
			Me.Adapter.InsertCommand.Parameters(9).Value = (CBool(AllDay))
			If (EventType.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = (CInt(Math.Truncate(EventType.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
			End If
			If (RecurrenceInfo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(11).Value = (CStr(RecurrenceInfo))
			End If
			If (ReminderInfo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(12).Value = (CStr(ReminderInfo))
			End If
			If (Price.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(13).Value = (CDec(Price.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
			End If
			If (ContactInfo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(14).Value = (CStr(ContactInfo))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
		Public Overridable Function Update(ByVal CarId? As Integer, ByVal UserId? As Integer, ByVal Status? As Integer, ByVal Subject As String, ByVal Description As String, ByVal Label? As Integer, ByVal StartTime? As Global.System.DateTime, ByVal EndTime? As Global.System.DateTime, ByVal Location As String, ByVal AllDay As Boolean, ByVal EventType? As Integer, ByVal RecurrenceInfo As String, ByVal ReminderInfo As String, ByVal Price? As Decimal, ByVal ContactInfo As String, ByVal Original_ID As Integer, ByVal Original_CarId? As Integer, ByVal Original_UserId? As Integer, ByVal Original_Status? As Integer, ByVal Original_Subject As String, ByVal Original_Label? As Integer, ByVal Original_StartTime? As Global.System.DateTime, ByVal Original_EndTime? As Global.System.DateTime, ByVal Original_Location As String, ByVal Original_AllDay As Boolean, ByVal Original_EventType? As Integer, ByVal Original_Price? As Decimal) As Integer
			If (CarId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CInt(Math.Truncate(CarId.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (UserId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CInt(Math.Truncate(UserId.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			If (Status.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CInt(Math.Truncate(Status.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Subject Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(Subject))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CStr(Description))
			End If
			If (Label.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CInt(Math.Truncate(Label.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (StartTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CDate(StartTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (EndTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CDate(EndTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			If (Location Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(Location))
			End If
			Me.Adapter.UpdateCommand.Parameters(9).Value = (CBool(AllDay))
			If (EventType.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CInt(Math.Truncate(EventType.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			End If
			If (RecurrenceInfo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(RecurrenceInfo))
			End If
			If (ReminderInfo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CStr(ReminderInfo))
			End If
			If (Price.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CDec(Price.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
			End If
			If (ContactInfo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CStr(ContactInfo))
			End If
			Me.Adapter.UpdateCommand.Parameters(15).Value = (CInt(Original_ID))
			If (Original_CarId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(16).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CInt(Math.Truncate(Original_CarId.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(16).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
			End If
			If (Original_UserId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(18).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CInt(Math.Truncate(Original_UserId.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(18).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
			End If
			If (Original_Status.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(20).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CInt(Math.Truncate(Original_Status.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(20).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
			End If
			If (Original_Subject Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(22).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(22).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CStr(Original_Subject))
			End If
			If (Original_Label.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(24).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CInt(Math.Truncate(Original_Label.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(24).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
			End If
			If (Original_StartTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(26).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CDate(Original_StartTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(26).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
			End If
			If (Original_EndTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(28).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CDate(Original_EndTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(28).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
			End If
			If (Original_Location Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(30).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(30).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CStr(Original_Location))
			End If
			Me.Adapter.UpdateCommand.Parameters(32).Value = (DirectCast(0, Object))
			Me.Adapter.UpdateCommand.Parameters(33).Value = (CBool(Original_AllDay))
			If (Original_EventType.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(34).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CInt(Math.Truncate(Original_EventType.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(34).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
			End If
			If (Original_Price.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(36).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CDec(Original_Price.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(36).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
	Partial Public Class CitiesTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Cities"
			tableMapping.ColumnMappings.Add("ID", "ID")
			tableMapping.ColumnMappings.Add("City", "City")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Cities` WHERE ((`ID` = ?) AND ((? = 1 AND `City` IS NULL) OR (`City`" & " = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Cities` (`City`) VALUES (?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Cities` SET `City` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `City` IS NULL) " & "OR (`City` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.CarsDBConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT ID, City FROM Cities"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
		Public Overridable Function Fill(ByVal dataTable As CarsDBDataSet.CitiesDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
		Public Overridable Function GetData() As CarsDBDataSet.CitiesDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New CarsDBDataSet.CitiesDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataTable As CarsDBDataSet.CitiesDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataSet As CarsDBDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Cities")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
		Public Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_City As String) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_ID))
			If (Original_City Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_City))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
		Public Overridable Function Insert(ByVal City As String) As Integer
			If (City Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(City))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
		Public Overridable Function Update(ByVal City As String, ByVal Original_ID As Integer, ByVal Original_City As String) As Integer
			If (City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(City))
			End If
			Me.Adapter.UpdateCommand.Parameters(1).Value = (CInt(Original_ID))
			If (Original_City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(Original_City))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
	Partial Public Class CustomersTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Customers"
			tableMapping.ColumnMappings.Add("ID", "ID")
			tableMapping.ColumnMappings.Add("FirstName", "FirstName")
			tableMapping.ColumnMappings.Add("LastName", "LastName")
			tableMapping.ColumnMappings.Add("Company", "Company")
			tableMapping.ColumnMappings.Add("Prefix", "Prefix")
			tableMapping.ColumnMappings.Add("Title", "Title")
			tableMapping.ColumnMappings.Add("Address", "Address")
			tableMapping.ColumnMappings.Add("City", "City")
			tableMapping.ColumnMappings.Add("State", "State")
			tableMapping.ColumnMappings.Add("ZipCode", "ZipCode")
			tableMapping.ColumnMappings.Add("Source", "Source")
			tableMapping.ColumnMappings.Add("Customer", "Customer")
			tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
			tableMapping.ColumnMappings.Add("FaxPhone", "FaxPhone")
			tableMapping.ColumnMappings.Add("Spouse", "Spouse")
			tableMapping.ColumnMappings.Add("Occupation", "Occupation")
			tableMapping.ColumnMappings.Add("Description", "Description")
			tableMapping.ColumnMappings.Add("Email", "Email")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Customers` WHERE ((`ID` = ?) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `Company` IS NULL) OR (`Company` = ?)) AND ((? = 1 AND `Prefix` IS NULL) OR (`Prefix` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `State` IS NULL) OR (`State` = ?)) AND ((? = 1 AND `ZipCode` IS NULL) OR (`ZipCode` = ?)) AND ((? = 1 AND `Source` IS NULL) OR (`Source` = ?)) AND ((? = 1 AND `Customer` IS NULL) OR (`Customer` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `FaxPhone` IS NULL) OR (`FaxPhone` = ?)) AND ((? = 1 AND `Spouse` IS NULL) OR (`Spouse` = ?)) AND ((? = 1 AND `Occupation` IS NULL) OR (`Occupation` = ?)) AND ((? = 1 AND `Email` IS NULL) OR (`Email` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FirstName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LastName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Company", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Company", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Company", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Company", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Prefix", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Prefix", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Prefix", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Prefix", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Title", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_State", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "State", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_State", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "State", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ZipCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ZipCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ZipCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ZipCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Source", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Source", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Source", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Source", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Customer", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Customer", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Customer", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Customer", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HomePhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FaxPhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FaxPhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FaxPhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FaxPhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Spouse", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Spouse", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Spouse", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Spouse", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Occupation", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Occupation", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Occupation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Occupation", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Email", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Email", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Email", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Email", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Customers` (`FirstName`, `LastName`, `Company`, `Prefix`, `Title`, `Address`, `City`, `State`, `ZipCode`, `Source`, `Customer`, `HomePhone`, `FaxPhone`, `Spouse`, `Occupation`, `Description`, `Email`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Company", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Company", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Prefix", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Prefix", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("State", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "State", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ZipCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ZipCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Source", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Source", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Customer", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Customer", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FaxPhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FaxPhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Spouse", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Spouse", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Occupation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Occupation", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Email", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Email", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Customers` SET `FirstName` = ?, `LastName` = ?, `Company` = ?, `Prefix` = ?, `Title` = ?, `Address` = ?, `City` = ?, `State` = ?, `ZipCode` = ?, `Source` = ?, `Customer` = ?, `HomePhone` = ?, `FaxPhone` = ?, `Spouse` = ?, `Occupation` = ?, `Description` = ?, `Email` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `Company` IS NULL) OR (`Company` = ?)) AND ((? = 1 AND `Prefix` IS NULL) OR (`Prefix` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `State` IS NULL) OR (`State` = ?)) AND ((? = 1 AND `ZipCode` IS NULL) OR (`ZipCode` = ?)) AND ((? = 1 AND `Source` IS NULL) OR (`Source` = ?)) AND ((? = 1 AND `Customer` IS NULL) OR (`Customer` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `FaxPhone` IS NULL) OR (`FaxPhone` = ?)) AND ((? = 1 AND `Spouse` IS NULL) OR (`Spouse` = ?)) AND ((? = 1 AND `Occupation` IS NULL) OR (`Occupation` = ?)) AND ((? = 1 AND `Email` IS NULL) OR (`Email` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Company", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Company", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Prefix", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Prefix", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("State", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "State", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ZipCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ZipCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Source", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Source", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Customer", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Customer", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FaxPhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FaxPhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Spouse", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Spouse", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Occupation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Occupation", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Email", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Email", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FirstName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LastName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Company", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Company", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Company", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Company", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Prefix", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Prefix", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Prefix", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Prefix", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Title", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_State", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "State", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_State", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "State", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ZipCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ZipCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ZipCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ZipCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Source", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Source", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Source", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Source", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Customer", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Customer", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Customer", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Customer", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HomePhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FaxPhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FaxPhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FaxPhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FaxPhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Spouse", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Spouse", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Spouse", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Spouse", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Occupation", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Occupation", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Occupation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Occupation", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Email", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Email", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Email", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Email", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.CarsDBConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT ID, FirstName, LastName, Company, Prefix, Title, Address, City, State, Zip" & "Code, Source, Customer, HomePhone, FaxPhone, Spouse, Occupation, Description, Em" & "ail FROM Customers"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
		Public Overridable Function Fill(ByVal dataTable As CarsDBDataSet.CustomersDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
		Public Overridable Function GetData() As CarsDBDataSet.CustomersDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New CarsDBDataSet.CustomersDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataTable As CarsDBDataSet.CustomersDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataSet As CarsDBDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Customers")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
		Public Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_FirstName As String, ByVal Original_LastName As String, ByVal Original_Company As String, ByVal Original_Prefix As String, ByVal Original_Title As String, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_State As String, ByVal Original_ZipCode As String, ByVal Original_Source As String, ByVal Original_Customer As String, ByVal Original_HomePhone As String, ByVal Original_FaxPhone As String, ByVal Original_Spouse As String, ByVal Original_Occupation As String, ByVal Original_Email As String) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_ID))
			If (Original_FirstName Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_FirstName))
			End If
			If (Original_LastName Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_LastName))
			End If
			If (Original_Company Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_Company))
			End If
			If (Original_Prefix Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_Prefix))
			End If
			If (Original_Title Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CStr(Original_Title))
			End If
			If (Original_Address Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CStr(Original_Address))
			End If
			If (Original_City Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_City))
			End If
			If (Original_State Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_State))
			End If
			If (Original_ZipCode Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(17).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(17).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(18).Value = (CStr(Original_ZipCode))
			End If
			If (Original_Source Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(19).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(19).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(20).Value = (CStr(Original_Source))
			End If
			If (Original_Customer Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(21).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(21).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(22).Value = (CStr(Original_Customer))
			End If
			If (Original_HomePhone Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(23).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(23).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(24).Value = (CStr(Original_HomePhone))
			End If
			If (Original_FaxPhone Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(25).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(25).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(26).Value = (CStr(Original_FaxPhone))
			End If
			If (Original_Spouse Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(27).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(27).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(28).Value = (CStr(Original_Spouse))
			End If
			If (Original_Occupation Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(29).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(29).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(30).Value = (CStr(Original_Occupation))
			End If
			If (Original_Email Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(31).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(31).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(32).Value = (CStr(Original_Email))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
		Public Overridable Function Insert(ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal Prefix As String, ByVal Title As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal ZipCode As String, ByVal Source As String, ByVal Customer As String, ByVal HomePhone As String, ByVal FaxPhone As String, ByVal Spouse As String, ByVal Occupation As String, ByVal Description As String, ByVal Email As String) As Integer
			If (FirstName Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(FirstName))
			End If
			If (LastName Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(LastName))
			End If
			If (Company Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(Company))
			End If
			If (Prefix Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(Prefix))
			End If
			If (Title Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = (CStr(Title))
			End If
			If (Address Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = (CStr(Address))
			End If
			If (City Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(City))
			End If
			If (State Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = (CStr(State))
			End If
			If (ZipCode Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = (CStr(ZipCode))
			End If
			If (Source Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(Source))
			End If
			If (Customer Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(Customer))
			End If
			If (HomePhone Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(11).Value = (CStr(HomePhone))
			End If
			If (FaxPhone Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(12).Value = (CStr(FaxPhone))
			End If
			If (Spouse Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(13).Value = (CStr(Spouse))
			End If
			If (Occupation Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(14).Value = (CStr(Occupation))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(15).Value = (CStr(Description))
			End If
			If (Email Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(16).Value = (CStr(Email))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
		Public Overridable Function Update(ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal Prefix As String, ByVal Title As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal ZipCode As String, ByVal Source As String, ByVal Customer As String, ByVal HomePhone As String, ByVal FaxPhone As String, ByVal Spouse As String, ByVal Occupation As String, ByVal Description As String, ByVal Email As String, ByVal Original_ID As Integer, ByVal Original_FirstName As String, ByVal Original_LastName As String, ByVal Original_Company As String, ByVal Original_Prefix As String, ByVal Original_Title As String, ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_State As String, ByVal Original_ZipCode As String, ByVal Original_Source As String, ByVal Original_Customer As String, ByVal Original_HomePhone As String, ByVal Original_FaxPhone As String, ByVal Original_Spouse As String, ByVal Original_Occupation As String, ByVal Original_Email As String) As Integer
			If (FirstName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(FirstName))
			End If
			If (LastName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(LastName))
			End If
			If (Company Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(Company))
			End If
			If (Prefix Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(Prefix))
			End If
			If (Title Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CStr(Title))
			End If
			If (Address Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CStr(Address))
			End If
			If (City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(City))
			End If
			If (State Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CStr(State))
			End If
			If (ZipCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(ZipCode))
			End If
			If (Source Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(Source))
			End If
			If (Customer Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Customer))
			End If
			If (HomePhone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(HomePhone))
			End If
			If (FaxPhone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CStr(FaxPhone))
			End If
			If (Spouse Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CStr(Spouse))
			End If
			If (Occupation Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CStr(Occupation))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CStr(Description))
			End If
			If (Email Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CStr(Email))
			End If
			Me.Adapter.UpdateCommand.Parameters(17).Value = (CInt(Original_ID))
			If (Original_FirstName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(18).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(18).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CStr(Original_FirstName))
			End If
			If (Original_LastName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(20).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(20).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CStr(Original_LastName))
			End If
			If (Original_Company Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(22).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(22).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CStr(Original_Company))
			End If
			If (Original_Prefix Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(24).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(24).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CStr(Original_Prefix))
			End If
			If (Original_Title Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(26).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(26).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CStr(Original_Title))
			End If
			If (Original_Address Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(28).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(28).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CStr(Original_Address))
			End If
			If (Original_City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(30).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(30).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CStr(Original_City))
			End If
			If (Original_State Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(32).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(32).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(33).Value = (CStr(Original_State))
			End If
			If (Original_ZipCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(34).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(34).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CStr(Original_ZipCode))
			End If
			If (Original_Source Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(36).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(36).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CStr(Original_Source))
			End If
			If (Original_Customer Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(38).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(38).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(39).Value = (CStr(Original_Customer))
			End If
			If (Original_HomePhone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(40).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(40).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(41).Value = (CStr(Original_HomePhone))
			End If
			If (Original_FaxPhone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(42).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(42).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(43).Value = (CStr(Original_FaxPhone))
			End If
			If (Original_Spouse Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(44).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(44).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(45).Value = (CStr(Original_Spouse))
			End If
			If (Original_Occupation Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(46).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(46).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(47).Value = (CStr(Original_Occupation))
			End If
			If (Original_Email Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(48).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(48).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(49).Value = (CStr(Original_Email))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
	Partial Public Class OrdersTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Orders"
			tableMapping.ColumnMappings.Add("ID", "ID")
			tableMapping.ColumnMappings.Add("CustomerID", "CustomerID")
			tableMapping.ColumnMappings.Add("ProductID", "ProductID")
			tableMapping.ColumnMappings.Add("PurchaseDate", "PurchaseDate")
			tableMapping.ColumnMappings.Add("Time", "Time")
			tableMapping.ColumnMappings.Add("PaymentType", "PaymentType")
			tableMapping.ColumnMappings.Add("PaymentAmount", "PaymentAmount")
			tableMapping.ColumnMappings.Add("Description", "Description")
			tableMapping.ColumnMappings.Add("Quantity", "Quantity")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Orders` WHERE ((`ID` = ?) AND ((? = 1 AND `CustomerID` IS NULL) OR (`CustomerID` = ?)) AND ((? = 1 AND `ProductID` IS NULL) OR (`ProductID` = ?)) AND ((? = 1 AND `PurchaseDate` IS NULL) OR (`PurchaseDate` = ?)) AND ((? = 1 AND `Time` IS NULL) OR (`Time` = ?)) AND ((? = 1 AND `PaymentType` IS NULL) OR (`PaymentType` = ?)) AND ((? = 1 AND `PaymentAmount` IS NULL) OR (`PaymentAmount` = ?)) AND ((? = 1 AND `Quantity` IS NULL) OR (`Quantity` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CustomerID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PurchaseDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PurchaseDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PurchaseDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PurchaseDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Time", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Time", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Time", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Time", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PaymentType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentType", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PaymentType", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentType", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PaymentAmount", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentAmount", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PaymentAmount", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentAmount", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Quantity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Quantity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Orders` (`CustomerID`, `ProductID`, `PurchaseDate`, `Time`, `Payment" & "Type`, `PaymentAmount`, `Description`, `Quantity`) VALUES (?, ?, ?, ?, ?, ?, ?, " & "?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PurchaseDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PurchaseDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Time", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Time", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PaymentType", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentType", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PaymentAmount", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentAmount", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Quantity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Orders` SET `CustomerID` = ?, `ProductID` = ?, `PurchaseDate` = ?, `Time` = ?, `PaymentType` = ?, `PaymentAmount` = ?, `Description` = ?, `Quantity` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `CustomerID` IS NULL) OR (`CustomerID` = ?)) AND ((? = 1 AND `ProductID` IS NULL) OR (`ProductID` = ?)) AND ((? = 1 AND `PurchaseDate` IS NULL) OR (`PurchaseDate` = ?)) AND ((? = 1 AND `Time` IS NULL) OR (`Time` = ?)) AND ((? = 1 AND `PaymentType` IS NULL) OR (`PaymentType` = ?)) AND ((? = 1 AND `PaymentAmount` IS NULL) OR (`PaymentAmount` = ?)) AND ((? = 1 AND `Quantity` IS NULL) OR (`Quantity` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PurchaseDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PurchaseDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Time", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Time", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PaymentType", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentType", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PaymentAmount", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentAmount", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Quantity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CustomerID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PurchaseDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PurchaseDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PurchaseDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PurchaseDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Time", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Time", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Time", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Time", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PaymentType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentType", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PaymentType", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentType", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PaymentAmount", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentAmount", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PaymentAmount", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PaymentAmount", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Quantity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Quantity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.CarsDBConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT ID, CustomerID, ProductID, PurchaseDate, [Time], PaymentType, PaymentAmoun" & "t, Description, Quantity FROM Orders"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
		Public Overridable Function Fill(ByVal dataTable As CarsDBDataSet.OrdersDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
		Public Overridable Function GetData() As CarsDBDataSet.OrdersDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New CarsDBDataSet.OrdersDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataTable As CarsDBDataSet.OrdersDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataSet As CarsDBDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Orders")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
		Public Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_CustomerID? As Integer, ByVal Original_ProductID? As Integer, ByVal Original_PurchaseDate? As Global.System.DateTime, ByVal Original_Time? As Global.System.DateTime, ByVal Original_PaymentType As String, ByVal Original_PaymentAmount? As Decimal, ByVal Original_Quantity? As Integer) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_ID))
			If (Original_CustomerID.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CInt(Math.Truncate(Original_CustomerID.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Original_ProductID.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CInt(Math.Truncate(Original_ProductID.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (Original_PurchaseDate.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CDate(Original_PurchaseDate.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (Original_Time.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CDate(Original_Time.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			If (Original_PaymentType Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CStr(Original_PaymentType))
			End If
			If (Original_PaymentAmount.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CDec(Original_PaymentAmount.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			End If
			If (Original_Quantity.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CInt(Math.Truncate(Original_Quantity.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
		Public Overridable Function Insert(ByVal CustomerID? As Integer, ByVal ProductID? As Integer, ByVal PurchaseDate? As Global.System.DateTime, ByVal Time? As Global.System.DateTime, ByVal PaymentType As String, ByVal PaymentAmount? As Decimal, ByVal Description As String, ByVal Quantity? As Integer) As Integer
			If (CustomerID.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CInt(Math.Truncate(CustomerID.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (ProductID.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = (CInt(Math.Truncate(ProductID.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			If (PurchaseDate.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CDate(PurchaseDate.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Time.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = (CDate(Time.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			End If
			If (PaymentType Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = (CStr(PaymentType))
			End If
			If (PaymentAmount.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = (CDec(PaymentAmount.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Description Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(Description))
			End If
			If (Quantity.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = (CInt(Math.Truncate(Quantity.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
		Public Overridable Function Update(ByVal CustomerID? As Integer, ByVal ProductID? As Integer, ByVal PurchaseDate? As Global.System.DateTime, ByVal Time? As Global.System.DateTime, ByVal PaymentType As String, ByVal PaymentAmount? As Decimal, ByVal Description As String, ByVal Quantity? As Integer, ByVal Original_ID As Integer, ByVal Original_CustomerID? As Integer, ByVal Original_ProductID? As Integer, ByVal Original_PurchaseDate? As Global.System.DateTime, ByVal Original_Time? As Global.System.DateTime, ByVal Original_PaymentType As String, ByVal Original_PaymentAmount? As Decimal, ByVal Original_Quantity? As Integer) As Integer
			If (CustomerID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CInt(Math.Truncate(CustomerID.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (ProductID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CInt(Math.Truncate(ProductID.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			If (PurchaseDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CDate(PurchaseDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Time.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CDate(Time.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			End If
			If (PaymentType Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CStr(PaymentType))
			End If
			If (PaymentAmount.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CDec(PaymentAmount.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Description Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(Description))
			End If
			If (Quantity.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CInt(Math.Truncate(Quantity.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(8).Value = (CInt(Original_ID))
			If (Original_CustomerID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CInt(Math.Truncate(Original_CustomerID.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			End If
			If (Original_ProductID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CInt(Math.Truncate(Original_ProductID.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
			End If
			If (Original_PurchaseDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CDate(Original_PurchaseDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
			End If
			If (Original_Time.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(15).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CDate(Original_Time.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(15).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
			End If
			If (Original_PaymentType Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(17).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(17).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CStr(Original_PaymentType))
			End If
			If (Original_PaymentAmount.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(19).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CDec(Original_PaymentAmount.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(19).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
			End If
			If (Original_Quantity.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(21).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CInt(Math.Truncate(Original_Quantity.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(21).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
	Partial Public Class UsageTypeTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "UsageType"
			tableMapping.ColumnMappings.Add("Id", "Id")
			tableMapping.ColumnMappings.Add("Name", "Name")
			tableMapping.ColumnMappings.Add("Color", "Color")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `UsageType` WHERE ((`Id` = ?) AND ((? = 1 AND `Name` IS NULL) OR (`Na" & "me` = ?)) AND ((? = 1 AND `Color` IS NULL) OR (`Color` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Name", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Name", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Name", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Name", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `UsageType` (`Name`, `Color`) VALUES (?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Name", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Name", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `UsageType` SET `Name` = ?, `Color` = ? WHERE ((`Id` = ?) AND ((? = 1 AND " & "`Name` IS NULL) OR (`Name` = ?)) AND ((? = 1 AND `Color` IS NULL) OR (`Color` = " & "?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Name", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Name", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Name", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Name", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Name", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Name", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Color", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Color", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.CarsDBConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT Id, Name, Color FROM UsageType"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
		Public Overridable Function Fill(ByVal dataTable As CarsDBDataSet.UsageTypeDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)>
		Public Overridable Function GetData() As CarsDBDataSet.UsageTypeDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New CarsDBDataSet.UsageTypeDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataTable As CarsDBDataSet.UsageTypeDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataSet As CarsDBDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "UsageType")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
		Public Overridable Function Delete(ByVal Original_Id As Integer, ByVal Original_Name As String, ByVal Original_Color? As Integer) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Original_Id))
			If (Original_Name Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_Name))
			End If
			If (Original_Color.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(0, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CInt(Math.Truncate(Original_Color.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (DirectCast(1, Object))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
		Public Overridable Function Insert(ByVal Name As String, ByVal Color? As Integer) As Integer
			If (Name Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(Name))
			End If
			If (Color.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = (CInt(Math.Truncate(Color.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
		Public Overridable Function Update(ByVal Name As String, ByVal Color? As Integer, ByVal Original_Id As Integer, ByVal Original_Name As String, ByVal Original_Color? As Integer) As Integer
			If (Name Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(Name))
			End If
			If (Color.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CInt(Math.Truncate(Color.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(2).Value = (CInt(Original_Id))
			If (Original_Name Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CStr(Original_Name))
			End If
			If (Original_Color.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (DirectCast(0, Object))
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CInt(Math.Truncate(Original_Color.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = (DirectCast(1, Object))
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class
End Namespace

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB:
'#pragma warning restore 1591